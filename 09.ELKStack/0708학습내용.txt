
1. ELK 설치
    다운로드
    압축해제
    디렉토리 이름 축소

    ElasticSearch(ES) bin/elasticsearch.bat 실행
        - 브라우저로 접속 확인  http://localhost:9200
        - 버전, 실행되는 pc의 이름...

    Kibana bin/kibana.bat 실행
        - 오래시간 대기하면서 실행
        - ES가 실행된 상태여야만 정상 실행
        - http://localhost:5601 접속  -> Dev Tools 에서 crud

2. 두 솔류션의 구동 원리
    1. json형식으로 저장
        - 저장 작업은 kibana에서 함
        - 저장은 ElasticSearch(ES)에 저장

    2. postman으로 crud 작업시 url
        http://127.0.0.1:9200


3. JSON 저장 구조
    1. REST API 관점에서 crud 

        POST hello_index/_doc/1      : 방식  table명/_doc/데이터구분을위한pk url 구성값
        {                            : json 포멧의 데이터 구조
            "message" : "힙합",       : message key로 힙합 저장 및 수정 의미 
            "name" : "NAS"
        }        

        postman 사용시 request 정보 구성에 있어서 JSON 포멧 설정 필수 


4. 모르고 하는 crud 
    1. 제공 데이터 
    {"employees":[
        { "firstName":"John", "lastName":"Doe" },
        { "firstName":"Anna", "lastName":"Smith" },
        { "firstName":"Peter", "lastName":"Jones" }
    ]}
    2. 저장 -> 검색 -> 수정 -> 검색 -> 삭제 -> 검색
    3. 해결해 나가는 방식에 대한 연구
        실행 불가? 에러 메시지 확인
        방법 모색
            { "firstName":"John", "lastName":"Doe" } 하나만 성공?
            성공시 필요요소 있다면 연구...

    4. 강사가 제공
        POST _bulk
        { "index" : { "_index" : "employees", "_id" : "1" } }
        { "firstName":"John", "lastName":"Doe" }
        { "index" : { "_index" : "employees", "_id" : "2" } }
        { "firstName":"Anna", "lastName":"Smith" }
        { "index" : { "_index" : "employees", "_id" : "3" } }
        { "firstName":"Peter", "lastName":"Jones" }

        GET employees

        GET employees/_search/?q=Smith

        - ES : 대용량 데이터를 빠르게 검색 활용 가능하게 해주는 엔진이 이미 내장
        대용량 데이터는 사용자들이 crud
        해당 문법은 JSON 포멧이기만 다 허용(정형 구조가 아님)

        - 단 db의 sql 처럼 es에서도 명확하게 구분
            : es 자체적인 문법 학습
            : REST API로 구현된 구조(Rest ful app)

        - 대용량 데이터를 한번에 여러가지를 es에 저장하기 위한 문법

        - _bulk : 다량의 데이터 활용 표현
        POST _bulk
        "_index" : "employees" : table명이 employees
        "_id" : "1" : id라는 컬럼에 pk값으로 1저장 의미
                    _id es에서 중복되지 않는 데이터 컬럼 의미
        index라는 key로 table과 id값 설정
        하나의 row값을 설정

        "index" : { "_index" : "table명", "_id" : "pk값" }
        { "index" : { "_index" : "employees", "_id" : "1" } }
        이미 존재하는 employees table에 id컬럼이 1인 row값으로 저장하고자 하는 데이터값들
        { "firstName":"John", "lastName":"Doe" }

5. ES 특징
    작업 절차
        1. 문법 오류가 없는 데이터만 저장
            table 이라는 index가 생성
            각 데이터에 적합한 field의 타입이 자동 적용(text,long..)
            저장데이터 하나의 row로 자동 저장
        
        2. 초반 table 생성처럼 각 field별 타입 지정 후 데이터 저장

        * RDB 특징
            table 생성 이후에만 데이터 저장 가능

6. Review
    1. kibana dev tool
        - 자동 완성 기능 사용 필수
    2. postman

    3. head - 크롬의 확장 plugin
        - 실시간 데이터 확인 및 활용 권장
    4. Curl - 도스창 명령어로 crud 작업 가능